for (b in levels(warmup$Benchmark)) {
for (v in levels(warmup$VM)) {
warmup <- droplevels(subset(warmup,
(Benchmark != b) | (VM != v) |
(Benchmark == b & VM == v &
Iteration <= (warmupIteration[warmupIteration$Benchmark == b & warmupIteration$VM == v,]$RR.min))
)
)
}
}
summary_warmup <- ddply(warmup, ~Benchmark + VM, summarise,
RR.sum = sum(Value),
RR.Iterations = max(Iteration))
summary_warmup_normalize <-ddply(summary_warmup, ~ Benchmark, transform,
Runtime = RR.sum / RR.sum[VM == 'SOM'],
Iter = RR.Iterations / RR.Iterations[VM == 'SOM'])
summary_warmup_normalize <- subset(summary_warmup_normalize, VM == 'Mate')
#plot summary_warmup_normalize
print (summary_warmup_normalize)
stats <- ddply(summary_warmup_normalize, .(), summarise,
RR.meanTime = geometric.mean(Runtime),
RR.meanIter = geometric.mean(Iter))
print (summary_warmup)
print (stats)
summary_warmup_absolute <- ddply(summary_warmup, ~VM, summarise,
RR.meanIterations = mean(RR.Iterations),
RR.meanValue = mean(RR.sum))
summary_warmup_absolute_geo <- ddply(summary_warmup, ~VM, summarise,
RR.meanIterations = geometric.mean(RR.Iterations),
RR.meanValue = geometric.mean(RR.sum))
print (summary_warmup_absolute)
# load libraries, the data, and prepare it
if (Sys.getenv("RSTUDIO") == "1") { setwd("/Users/smarr/Projects/PostDoc/Guido-Chari/optimizing-reflective-execution-environments/Resultados/Experiments/Warmups/") }
source("../../scripts/preprocessing.R", chdir=TRUE)
rawData <- getAndPrepareData("inherent.data")
source("selectIterationsAndInliningDataWarmup.R", chdir=TRUE)
warmup <- selectIterationsAndInlining(rawData, 500, truffleSOM, truffleMate)
#source("../../scripts/selectIterationsAndInliningData.R", chdir=TRUE)
source("selectIterationsAndInliningData.R", chdir=TRUE)
#data <- selectIterationsAndInlining(data, 150, truffleSOMWithMoreInlining, truffleMateWithMoreInlining)
peak <- selectIterationsAndInlining(rawData, 150, truffleSOM, truffleMate)
peak <- droplevels(subset(peak, (Benchmark!="Fibonacci" & Benchmark!="Recurse" & Benchmark!="Permute")))
warmup <- droplevels(subset(warmup, (Benchmark!="Fibonacci" & Benchmark!="Recurse" & Benchmark!="Permute")))
peak <- droplevels(subset(peak, (Benchmark=="Queens")))
warmup <- droplevels(subset(warmup, (Benchmark=="Queens")))
# peak <- droplevels(subset(peak, (Benchmark!="Fibonacci" & Benchmark!="Recurse" & Benchmark!="Permute" & Benchmark!="TreeSort" & Benchmark!="Storage" & Benchmark!="Queens" & Benchmark!="FieldLoop")))
# warmup <- droplevels(subset(warmup, (Benchmark!="Fibonacci" & Benchmark!="Recurse" & Benchmark!="Permute" & Benchmark!="TreeSort" & Benchmark!="Storage" & Benchmark!="Queens" & Benchmark!="FieldLoop")))
first_Iteration <- droplevels(subset(warmup, (Iteration==1)))
print (first_Iteration)
stats <- ddply(first_Iteration, ~ VM, summarise,
RR.meanTime = mean(Value))
print (stats)
# Calculate the mean of the peak times
peak_summary <- ddply(peak, ~ Benchmark + VM, summarise,
RR.mean                 = mean(Value),
RR.var                  = var(Value))
peakMean <- apply(warmup, 1, function(x) peak_summary[peak_summary$Bench == x["Benchmark"] & peak_summary$VM == x["VM"],]$RR.mean)
#peakVar  <- apply(warmup, 1, function(x) peak_summary[peak_summary$Bench == x["Benchmark"] & peak_summary$VM == x["VM"],]$RR.var)
#Add the mean of the peak times to the warmup data
warmup$peakMean <- peakMean
#warmup$peakVar <- peakVar
#Add a column with the difference of each warmup iteration with the mean of the peak times and another column defining if the difference is < than a threshold (10%)
warmup <- mutate(warmup,
normDifference = Value / peakMean,
#                 plainDifference = Value - peakMean,
condition = (normDifference < 1.10)
)
#Keep only in true those rows which not only have a difference below 10% but also their next 5 iterations are below 10%
for (i in 1:(nrow(warmup)-5))
{
if (warmup$condition[i] == T){
for (j in 1:5){
if (warmup$condition[i + j] == F){
warmup$condition[i] = F
}
}
}
}
#str(warmup)
warmupIteration <- ddply(subset(warmup, condition == T), ~ Benchmark + VM, summarise,
RR.min = min(Iteration))
for (b in levels(warmup$Benchmark)) {
for (v in levels(warmup$VM)) {
warmup <- droplevels(subset(warmup,
(Benchmark != b) | (VM != v) |
(Benchmark == b & VM == v &
Iteration <= (warmupIteration[warmupIteration$Benchmark == b & warmupIteration$VM == v,]$RR.min))
)
)
}
}
summary_warmup <- ddply(warmup, ~Benchmark + VM, summarise,
RR.sum = sum(Value),
RR.Iterations = max(Iteration))
summary_warmup_normalize <-ddply(summary_warmup, ~ Benchmark, transform,
Runtime = RR.sum / RR.sum[VM == 'SOM'],
Iter = RR.Iterations / RR.Iterations[VM == 'SOM'])
summary_warmup_normalize <- subset(summary_warmup_normalize, VM == 'Mate')
#plot summary_warmup_normalize
print (summary_warmup_normalize)
stats <- ddply(summary_warmup_normalize, .(), summarise,
RR.meanTime = geometric.mean(Runtime),
RR.meanIter = geometric.mean(Iter))
print (summary_warmup)
print (stats)
summary_warmup_absolute <- ddply(summary_warmup, ~VM, summarise,
RR.meanIterations = mean(RR.Iterations),
RR.meanValue = mean(RR.sum))
summary_warmup_absolute_geo <- ddply(summary_warmup, ~VM, summarise,
RR.meanIterations = geometric.mean(RR.Iterations),
RR.meanValue = geometric.mean(RR.sum))
print (summary_warmup_absolute)
# load libraries, the data, and prepare it
if (Sys.getenv("RSTUDIO") == "1") { setwd("/Users/smarr/Projects/PostDoc/Guido-Chari/optimizing-reflective-execution-environments/Resultados/Experiments/Warmups/") }
source("../../scripts/preprocessing.R", chdir=TRUE)
rawData <- getAndPrepareData("inherent.data")
source("selectIterationsAndInliningDataWarmup.R", chdir=TRUE)
warmup <- selectIterationsAndInlining(rawData, 500, truffleSOM, truffleMate)
#source("../../scripts/selectIterationsAndInliningData.R", chdir=TRUE)
source("selectIterationsAndInliningData.R", chdir=TRUE)
#data <- selectIterationsAndInlining(data, 150, truffleSOMWithMoreInlining, truffleMateWithMoreInlining)
peak <- selectIterationsAndInlining(rawData, 150, truffleSOM, truffleMate)
peak <- droplevels(subset(peak, (Benchmark!="Fibonacci" & Benchmark!="Recurse" & Benchmark!="Permute")))
warmup <- droplevels(subset(warmup, (Benchmark!="Fibonacci" & Benchmark!="Recurse" & Benchmark!="Permute")))
peak <- droplevels(subset(peak, (Benchmark=="Queens")))
warmup <- droplevels(subset(warmup, (Benchmark=="Queens")))
# peak <- droplevels(subset(peak, (Benchmark!="Fibonacci" & Benchmark!="Recurse" & Benchmark!="Permute" & Benchmark!="TreeSort" & Benchmark!="Storage" & Benchmark!="Queens" & Benchmark!="FieldLoop")))
# warmup <- droplevels(subset(warmup, (Benchmark!="Fibonacci" & Benchmark!="Recurse" & Benchmark!="Permute" & Benchmark!="TreeSort" & Benchmark!="Storage" & Benchmark!="Queens" & Benchmark!="FieldLoop")))
first_Iteration <- droplevels(subset(warmup, (Iteration==1)))
print (first_Iteration)
stats <- ddply(first_Iteration, ~ VM, summarise,
RR.meanTime = mean(Value))
print (stats)
# Calculate the mean of the peak times
peak_summary <- ddply(peak, ~ Benchmark + VM, summarise,
RR.mean                 = mean(Value),
RR.var                  = var(Value))
peakMean <- apply(warmup, 1, function(x) peak_summary[peak_summary$Bench == x["Benchmark"] & peak_summary$VM == x["VM"],]$RR.mean)
#peakVar  <- apply(warmup, 1, function(x) peak_summary[peak_summary$Bench == x["Benchmark"] & peak_summary$VM == x["VM"],]$RR.var)
#Add the mean of the peak times to the warmup data
warmup$peakMean <- peakMean
#warmup$peakVar <- peakVar
#Add a column with the difference of each warmup iteration with the mean of the peak times and another column defining if the difference is < than a threshold (10%)
warmup <- mutate(warmup,
normDifference = Value / peakMean,
#                 plainDifference = Value - peakMean,
condition = (normDifference < 1.10)
)
#Keep only in true those rows which not only have a difference below 10% but also their next 5 iterations are below 10%
for (i in 1:(nrow(warmup)-25))
{
if (warmup$condition[i] == T){
for (j in 1:5){
if (warmup$condition[i + j] == F){
warmup$condition[i] = F
}
}
}
}
#str(warmup)
warmupIteration <- ddply(subset(warmup, condition == T), ~ Benchmark + VM, summarise,
RR.min = min(Iteration))
for (b in levels(warmup$Benchmark)) {
for (v in levels(warmup$VM)) {
warmup <- droplevels(subset(warmup,
(Benchmark != b) | (VM != v) |
(Benchmark == b & VM == v &
Iteration <= (warmupIteration[warmupIteration$Benchmark == b & warmupIteration$VM == v,]$RR.min))
)
)
}
}
summary_warmup <- ddply(warmup, ~Benchmark + VM, summarise,
RR.sum = sum(Value),
RR.Iterations = max(Iteration))
summary_warmup_normalize <-ddply(summary_warmup, ~ Benchmark, transform,
Runtime = RR.sum / RR.sum[VM == 'SOM'],
Iter = RR.Iterations / RR.Iterations[VM == 'SOM'])
summary_warmup_normalize <- subset(summary_warmup_normalize, VM == 'Mate')
#plot summary_warmup_normalize
print (summary_warmup_normalize)
stats <- ddply(summary_warmup_normalize, .(), summarise,
RR.meanTime = geometric.mean(Runtime),
RR.meanIter = geometric.mean(Iter))
print (summary_warmup)
print (stats)
summary_warmup_absolute <- ddply(summary_warmup, ~VM, summarise,
RR.meanIterations = mean(RR.Iterations),
RR.meanValue = mean(RR.sum))
summary_warmup_absolute_geo <- ddply(summary_warmup, ~VM, summarise,
RR.meanIterations = geometric.mean(RR.Iterations),
RR.meanValue = geometric.mean(RR.sum))
print (summary_warmup_absolute)
# load libraries, the data, and prepare it
if (Sys.getenv("RSTUDIO") == "1") { setwd("/Users/smarr/Projects/PostDoc/Guido-Chari/optimizing-reflective-execution-environments/Resultados/Experiments/Warmups/") }
source("../../scripts/preprocessing.R", chdir=TRUE)
rawData <- getAndPrepareData("inherent.data")
source("selectIterationsAndInliningDataWarmup.R", chdir=TRUE)
warmup <- selectIterationsAndInlining(rawData, 500, truffleSOM, truffleMate)
#source("../../scripts/selectIterationsAndInliningData.R", chdir=TRUE)
source("selectIterationsAndInliningData.R", chdir=TRUE)
#data <- selectIterationsAndInlining(data, 150, truffleSOMWithMoreInlining, truffleMateWithMoreInlining)
peak <- selectIterationsAndInlining(rawData, 150, truffleSOM, truffleMate)
peak <- droplevels(subset(peak, (Benchmark!="Fibonacci" & Benchmark!="Recurse" & Benchmark!="Permute")))
warmup <- droplevels(subset(warmup, (Benchmark!="Fibonacci" & Benchmark!="Recurse" & Benchmark!="Permute")))
peak <- droplevels(subset(peak, (Benchmark=="Queens")))
warmup <- droplevels(subset(warmup, (Benchmark=="Queens")))
# peak <- droplevels(subset(peak, (Benchmark!="Fibonacci" & Benchmark!="Recurse" & Benchmark!="Permute" & Benchmark!="TreeSort" & Benchmark!="Storage" & Benchmark!="Queens" & Benchmark!="FieldLoop")))
# warmup <- droplevels(subset(warmup, (Benchmark!="Fibonacci" & Benchmark!="Recurse" & Benchmark!="Permute" & Benchmark!="TreeSort" & Benchmark!="Storage" & Benchmark!="Queens" & Benchmark!="FieldLoop")))
first_Iteration <- droplevels(subset(warmup, (Iteration==1)))
print (first_Iteration)
stats <- ddply(first_Iteration, ~ VM, summarise,
RR.meanTime = mean(Value))
print (stats)
# Calculate the mean of the peak times
peak_summary <- ddply(peak, ~ Benchmark + VM, summarise,
RR.mean                 = mean(Value),
RR.var                  = var(Value))
peakMean <- apply(warmup, 1, function(x) peak_summary[peak_summary$Bench == x["Benchmark"] & peak_summary$VM == x["VM"],]$RR.mean)
#peakVar  <- apply(warmup, 1, function(x) peak_summary[peak_summary$Bench == x["Benchmark"] & peak_summary$VM == x["VM"],]$RR.var)
#Add the mean of the peak times to the warmup data
warmup$peakMean <- peakMean
#warmup$peakVar <- peakVar
#Add a column with the difference of each warmup iteration with the mean of the peak times and another column defining if the difference is < than a threshold (10%)
warmup <- mutate(warmup,
normDifference = Value / peakMean,
#                 plainDifference = Value - peakMean,
condition = (normDifference < 1.20)
)
#Keep only in true those rows which not only have a difference below 10% but also their next 5 iterations are below 10%
for (i in 1:(nrow(warmup)-25))
{
if (warmup$condition[i] == T){
for (j in 1:5){
if (warmup$condition[i + j] == F){
warmup$condition[i] = F
}
}
}
}
#str(warmup)
warmupIteration <- ddply(subset(warmup, condition == T), ~ Benchmark + VM, summarise,
RR.min = min(Iteration))
for (b in levels(warmup$Benchmark)) {
for (v in levels(warmup$VM)) {
warmup <- droplevels(subset(warmup,
(Benchmark != b) | (VM != v) |
(Benchmark == b & VM == v &
Iteration <= (warmupIteration[warmupIteration$Benchmark == b & warmupIteration$VM == v,]$RR.min))
)
)
}
}
summary_warmup <- ddply(warmup, ~Benchmark + VM, summarise,
RR.sum = sum(Value),
RR.Iterations = max(Iteration))
summary_warmup_normalize <-ddply(summary_warmup, ~ Benchmark, transform,
Runtime = RR.sum / RR.sum[VM == 'SOM'],
Iter = RR.Iterations / RR.Iterations[VM == 'SOM'])
summary_warmup_normalize <- subset(summary_warmup_normalize, VM == 'Mate')
#plot summary_warmup_normalize
print (summary_warmup_normalize)
stats <- ddply(summary_warmup_normalize, .(), summarise,
RR.meanTime = geometric.mean(Runtime),
RR.meanIter = geometric.mean(Iter))
print (summary_warmup)
print (stats)
summary_warmup_absolute <- ddply(summary_warmup, ~VM, summarise,
RR.meanIterations = mean(RR.Iterations),
RR.meanValue = mean(RR.sum))
summary_warmup_absolute_geo <- ddply(summary_warmup, ~VM, summarise,
RR.meanIterations = geometric.mean(RR.Iterations),
RR.meanValue = geometric.mean(RR.sum))
print (summary_warmup_absolute)
View(peak)
View(peak)
View(warmup)
# load libraries, the data, and prepare it
if (Sys.getenv("RSTUDIO") == "1") { setwd("/Users/smarr/Projects/PostDoc/Guido-Chari/optimizing-reflective-execution-environments/Resultados/Experiments/Warmups/") }
source("../../scripts/preprocessing.R", chdir=TRUE)
rawData <- getAndPrepareData("inherent.data")
source("selectIterationsAndInliningDataWarmup.R", chdir=TRUE)
warmup <- selectIterationsAndInlining(rawData, 500, truffleSOM, truffleMate)
#source("../../scripts/selectIterationsAndInliningData.R", chdir=TRUE)
source("selectIterationsAndInliningData.R", chdir=TRUE)
#data <- selectIterationsAndInlining(data, 150, truffleSOMWithMoreInlining, truffleMateWithMoreInlining)
peak <- selectIterationsAndInlining(rawData, 150, truffleSOM, truffleMate)
peak <- droplevels(subset(peak, (Benchmark!="Fibonacci" & Benchmark!="Recurse" & Benchmark!="Permute")))
warmup <- droplevels(subset(warmup, (Benchmark!="Fibonacci" & Benchmark!="Recurse" & Benchmark!="Permute")))
peak <- droplevels(subset(peak, (Benchmark=="Queens")))
warmup <- droplevels(subset(warmup, (Benchmark=="Queens")))
# peak <- droplevels(subset(peak, (Benchmark!="Fibonacci" & Benchmark!="Recurse" & Benchmark!="Permute" & Benchmark!="TreeSort" & Benchmark!="Storage" & Benchmark!="Queens" & Benchmark!="FieldLoop")))
# warmup <- droplevels(subset(warmup, (Benchmark!="Fibonacci" & Benchmark!="Recurse" & Benchmark!="Permute" & Benchmark!="TreeSort" & Benchmark!="Storage" & Benchmark!="Queens" & Benchmark!="FieldLoop")))
first_Iteration <- droplevels(subset(warmup, (Iteration==1)))
print (first_Iteration)
stats <- ddply(first_Iteration, ~ VM, summarise,
RR.meanTime = mean(Value))
print (stats)
# Calculate the mean of the peak times
peak_summary <- ddply(peak, ~ Benchmark + VM, summarise,
RR.mean                 = mean(Value),
RR.var                  = var(Value))
peakMean <- apply(warmup, 1, function(x) peak_summary[peak_summary$Bench == x["Benchmark"] & peak_summary$VM == x["VM"],]$RR.mean)
#peakVar  <- apply(warmup, 1, function(x) peak_summary[peak_summary$Bench == x["Benchmark"] & peak_summary$VM == x["VM"],]$RR.var)
#Add the mean of the peak times to the warmup data
warmup$peakMean <- peakMean
#warmup$peakVar <- peakVar
#Add a column with the difference of each warmup iteration with the mean of the peak times and another column defining if the difference is < than a threshold (10%)
warmup <- mutate(warmup,
normDifference = Value / peakMean,
#                 plainDifference = Value - peakMean,
condition = (normDifference < 1.50)
)
#Keep only in true those rows which not only have a difference below 10% but also their next 5 iterations are below 10%
for (i in 1:(nrow(warmup)-25))
{
if (warmup$condition[i] == T){
for (j in 1:5){
if (warmup$condition[i + j] == F){
warmup$condition[i] = F
}
}
}
}
#str(warmup)
warmupIteration <- ddply(subset(warmup, condition == T), ~ Benchmark + VM, summarise,
RR.min = min(Iteration))
for (b in levels(warmup$Benchmark)) {
for (v in levels(warmup$VM)) {
warmup <- droplevels(subset(warmup,
(Benchmark != b) | (VM != v) |
(Benchmark == b & VM == v &
Iteration <= (warmupIteration[warmupIteration$Benchmark == b & warmupIteration$VM == v,]$RR.min))
)
)
}
}
summary_warmup <- ddply(warmup, ~Benchmark + VM, summarise,
RR.sum = sum(Value),
RR.Iterations = max(Iteration))
summary_warmup_normalize <-ddply(summary_warmup, ~ Benchmark, transform,
Runtime = RR.sum / RR.sum[VM == 'SOM'],
Iter = RR.Iterations / RR.Iterations[VM == 'SOM'])
summary_warmup_normalize <- subset(summary_warmup_normalize, VM == 'Mate')
#plot summary_warmup_normalize
print (summary_warmup_normalize)
stats <- ddply(summary_warmup_normalize, .(), summarise,
RR.meanTime = geometric.mean(Runtime),
RR.meanIter = geometric.mean(Iter))
print (summary_warmup)
print (stats)
summary_warmup_absolute <- ddply(summary_warmup, ~VM, summarise,
RR.meanIterations = mean(RR.Iterations),
RR.meanValue = mean(RR.sum))
summary_warmup_absolute_geo <- ddply(summary_warmup, ~VM, summarise,
RR.meanIterations = geometric.mean(RR.Iterations),
RR.meanValue = geometric.mean(RR.sum))
print (summary_warmup_absolute)
# load libraries, the data, and prepare it
if (Sys.getenv("RSTUDIO") == "1") { setwd("/Users/smarr/Projects/PostDoc/Guido-Chari/optimizing-reflective-execution-environments/Resultados/Experiments/Warmups/") }
source("../../scripts/preprocessing.R", chdir=TRUE)
rawData <- getAndPrepareData("inherent.data")
source("selectIterationsAndInliningDataWarmup.R", chdir=TRUE)
warmup <- selectIterationsAndInlining(rawData, 500, truffleSOM, truffleMate)
#source("../../scripts/selectIterationsAndInliningData.R", chdir=TRUE)
source("selectIterationsAndInliningData.R", chdir=TRUE)
#data <- selectIterationsAndInlining(data, 150, truffleSOMWithMoreInlining, truffleMateWithMoreInlining)
peak <- selectIterationsAndInlining(rawData, 150, truffleSOM, truffleMate)
peak <- droplevels(subset(peak, (Benchmark!="Fibonacci" & Benchmark!="Recurse" & Benchmark!="Permute")))
warmup <- droplevels(subset(warmup, (Benchmark!="Fibonacci" & Benchmark!="Recurse" & Benchmark!="Permute")))
#peak <- droplevels(subset(peak, (Benchmark=="Queens")))
#warmup <- droplevels(subset(warmup, (Benchmark=="Queens")))
# peak <- droplevels(subset(peak, (Benchmark!="Fibonacci" & Benchmark!="Recurse" & Benchmark!="Permute" & Benchmark!="TreeSort" & Benchmark!="Storage" & Benchmark!="Queens" & Benchmark!="FieldLoop")))
# warmup <- droplevels(subset(warmup, (Benchmark!="Fibonacci" & Benchmark!="Recurse" & Benchmark!="Permute" & Benchmark!="TreeSort" & Benchmark!="Storage" & Benchmark!="Queens" & Benchmark!="FieldLoop")))
first_Iteration <- droplevels(subset(warmup, (Iteration==1)))
print (first_Iteration)
stats <- ddply(first_Iteration, ~ VM, summarise,
RR.meanTime = mean(Value))
print (stats)
# Calculate the mean of the peak times
peak_summary <- ddply(peak, ~ Benchmark + VM, summarise,
RR.mean                 = mean(Value),
RR.var                  = var(Value))
peakMean <- apply(warmup, 1, function(x) peak_summary[peak_summary$Bench == x["Benchmark"] & peak_summary$VM == x["VM"],]$RR.mean)
#peakVar  <- apply(warmup, 1, function(x) peak_summary[peak_summary$Bench == x["Benchmark"] & peak_summary$VM == x["VM"],]$RR.var)
#Add the mean of the peak times to the warmup data
warmup$peakMean <- peakMean
#warmup$peakVar <- peakVar
#Add a column with the difference of each warmup iteration with the mean of the peak times and another column defining if the difference is < than a threshold (10%)
warmup <- mutate(warmup,
normDifference = Value / peakMean,
#                 plainDifference = Value - peakMean,
condition = (normDifference < 1.50)
)
#Keep only in true those rows which not only have a difference below 10% but also their next 5 iterations are below 10%
for (i in 1:(nrow(warmup)-25))
{
if (warmup$condition[i] == T){
for (j in 1:5){
if (warmup$condition[i + j] == F){
warmup$condition[i] = F
}
}
}
}
#str(warmup)
warmupIteration <- ddply(subset(warmup, condition == T), ~ Benchmark + VM, summarise,
RR.min = min(Iteration))
for (b in levels(warmup$Benchmark)) {
for (v in levels(warmup$VM)) {
warmup <- droplevels(subset(warmup,
(Benchmark != b) | (VM != v) |
(Benchmark == b & VM == v &
Iteration <= (warmupIteration[warmupIteration$Benchmark == b & warmupIteration$VM == v,]$RR.min))
)
)
}
}
summary_warmup <- ddply(warmup, ~Benchmark + VM, summarise,
RR.sum = sum(Value),
RR.Iterations = max(Iteration))
summary_warmup_normalize <-ddply(summary_warmup, ~ Benchmark, transform,
Runtime = RR.sum / RR.sum[VM == 'SOM'],
Iter = RR.Iterations / RR.Iterations[VM == 'SOM'])
summary_warmup_normalize <- subset(summary_warmup_normalize, VM == 'Mate')
#plot summary_warmup_normalize
print (summary_warmup_normalize)
stats <- ddply(summary_warmup_normalize, .(), summarise,
RR.meanTime = geometric.mean(Runtime),
RR.meanIter = geometric.mean(Iter))
print (summary_warmup)
print (stats)
summary_warmup_absolute <- ddply(summary_warmup, ~VM, summarise,
RR.meanIterations = mean(RR.Iterations),
RR.meanValue = mean(RR.sum))
summary_warmup_absolute_geo <- ddply(summary_warmup, ~VM, summarise,
RR.meanIterations = geometric.mean(RR.Iterations),
RR.meanValue = geometric.mean(RR.sum))
print (summary_warmup_absolute)
if (Sys.getenv("RSTUDIO") == "1") { setwd("/Users/smarr/Projects/PostDoc/Benoit-Daloze/papers/2016-ThreadSafeDynamicObject/sections") }
source("../scripts/libraries.R", chdir=TRUE)
opts_chunk$set(
fig.path="figures/",
# dev=c('tikz'),
dev.args=list(pointsize=10),
dev='pdf',#c('tikz', 'corollarysvg'),
echo=FALSE,
external=FALSE,
tidy=FALSE)
data <- rbind(load_data_file("../data/benchmark.data.bz2"),
load_data_file("../data/bdata-MRI23.bz2"))
## We are only interested in standard Java, V8, and JRubyTruffleEnterprise, and the V8 version of deltablue is also not intersting (it is still in the data set)
data <- droplevels(subset(data, Benchmark != "DeltaBlueV8",
select = c(Value, Unit, Benchmark, VM, Iteration)))
## take warmed up sample
peak <- rbind(subset(data, Iteration >= 700 & Iteration <= 999),
subset(data, VM == "MRI22" | VM == "MRI23"),
subset(data, Iteration >= 90 & Iteration <= 170 & VM %in% c("JRubyC2", "JRubyGraal", "JRubyJ8", "RBX314")))
norm <- ddply(peak, ~ Benchmark, transform,
RuntimeRatio = Value / mean(Value[VM == "Java8U66"]))
stats <- ddply(norm, ~ VM + Benchmark, summarise,
Time.ms = mean(Value),
sd      = sd(Value),
RuntimeFactor = mean(RuntimeRatio),
RR.sd         = sd(RuntimeRatio))
vm_stats <- ddply(stats, ~ VM, summarise,
median = median(RuntimeFactor),
geommean = geometric.mean(RuntimeFactor),
min = min(RuntimeFactor),
max = max(RuntimeFactor))
filtered_data = prepare_vm_names(subset(stats, (VM == "Java8U66" | VM == "JRubyTruffleEnterprise" | VM == "Node")))
plot <- ggplot(filtered_data, aes(x=VM, y=RuntimeFactor)) +
geom_boxplot(lwd=0.3, color = "darkgray") + # ,fill=c("blue", brewer.pal(9, "YlOrRd")[7], brewer.pal(9, "YlOrRd")[4])
geom_jitter(size=0.7, position = position_jitter(width = .2, height = 0)) +
theme_simple() + theme(
legend.position="none",
axis.title.y = element_blank()) +
ggtitle("Runtime Factor, normalized to Java") +
coord_flip(ylim = c(0.89, 4.5)) + xlab("")
plot
filtered_data
data <- load_data_file("../data/benchmark.data.bz2")
## We are only interested in standard Java, V8, and JRubyTruffleEnterprise, and the V8 version of deltablue is also not intersting (it is still in the data set)
data <- droplevels(subset(data, Benchmark != "DeltaBlueV8",
select = c(Value, Unit, Benchmark, VM, Iteration)))
## take warmed up sample
peak <- rbind(subset(data, Iteration >= 700 & Iteration <= 999),
subset(data, VM == "MRI22" | VM == "MRI23"),
subset(data, Iteration >= 90 & Iteration <= 170 & VM %in% c("JRubyC2", "JRubyGraal", "JRubyJ8", "RBX314")))
norm <- ddply(peak, ~ Benchmark, transform,
RuntimeRatio = Value / mean(Value[VM == "Java8U66"]))
stats <- ddply(norm, ~ VM + Benchmark, summarise,
Time.ms = mean(Value),
sd      = sd(Value),
RuntimeFactor = mean(RuntimeRatio),
RR.sd         = sd(RuntimeRatio))
vm_stats <- ddply(stats, ~ VM, summarise,
median = median(RuntimeFactor),
geommean = geometric.mean(RuntimeFactor),
min = min(RuntimeFactor),
max = max(RuntimeFactor))
filtered_data = prepare_vm_names(subset(stats, (VM == "Java8U66" | VM == "JRubyTruffleEnterprise" | VM == "Node")))
plot <- ggplot(filtered_data, aes(x=VM, y=RuntimeFactor)) +
geom_boxplot(lwd=0.3, color = "darkgray") + # ,fill=c("blue", brewer.pal(9, "YlOrRd")[7], brewer.pal(9, "YlOrRd")[4])
geom_jitter(size=0.7, position = position_jitter(width = .2, height = 0)) +
theme_simple() + theme(
legend.position="none",
axis.title.y = element_blank()) +
ggtitle("Runtime Factor, normalized to Java") +
coord_flip(ylim = c(0.89, 4.5)) + xlab("")
plot
filtered_data
