%!TEX root = ../paper.tex

<<knitr-settings, echo=FALSE, include=FALSE, cache=TRUE>>=
# load libraries, the data, and prepare it
if (Sys.getenv("RSTUDIO") == "1") { 
  if (Sys.getenv("LOGNAME") == "smarr") {
    setwd("/Users/smarr/Collab/Dominik-Aumayr/Snapshot_Paper/evaluation")
  } else {
    setwd("/Users/dominikaumayr/Documents/Workspaces/Snapshot_Paper/evaluation")
  }
}
source("../scripts/libraries.R", chdir=TRUE)
source("../scripts/paper.R", chdir=TRUE)

row_names <- c("Iteration", "Invocation", "Value", "Objects", "Seed", "VM")
pharo <- read.table("ACDC_Pharo.data", sep="\t", header=FALSE, col.names=row_names, fill=TRUE)
pharo <- mutate(pharo, VM = "Pharo")
som <- read.table("ACDC_SOM.data", sep="\t", header=FALSE, col.names=row_names, fill=TRUE)
som <- mutate(som, VM = "SOMns")
som <- som %>% transform(Value = Value/1000)# som is in us, pharo in ms...

bench <- rbind(som, pharo)

bench$VM <- as.factor(bench$VM)
bench$Invocation <- as.factor(bench$Invocation)
#saveRDS(bench, file = "acme.rds.bz2", compress = "bzip2")
#bench <- readRDS("acme.rds.bz2")

## Assume that all benchmarks are warmed up after 100 iterations, mostly true, based on visual inspection
bench <- droplevels(subset(bench, Iteration >= 500 & Iteration < 1990))

## Calculate mean for SOMns
base <- bench %>%
  filter(VM == "SOMns") %>%
  group_by(Invocation) %>%
  summarise(ValueMean = mean(Value))

norm <- bench %>%
  left_join(base) %>%
  group_by(Invocation) %>%
  transform(ValueRatio = Value / ValueMean)
  
stats <- norm %>%
  group_by(VM, Invocation) %>%
  summarise(
    Time.ms = mean(Value),
    sd      = sd(Value),
    RuntimeFactor = mean(ValueRatio),
    RR.sd         = sd(ValueRatio),
    RR.median     = median(ValueRatio))

vm_stats <- stats %>%
  group_by(VM)%>%
  summarise(
    gmean     = geometric.mean(RuntimeFactor),
    min       = min(RuntimeFactor),
    max       = max(RuntimeFactor),
    RF.sd     = sd(RuntimeFactor),
    RF.median = median(RuntimeFactor))

stats_vm <- stats %>%
  group_by(VM) %>%
  transform(
    VMMean = geometric.mean(RuntimeFactor),
    min = min(RuntimeFactor),
    max = max(RuntimeFactor))

#original <- droplevels(subset(bench, VM == "Baseline"))
#original <- tail(original[order(original$Latency),], 1000) 

#snaps <- droplevels(subset(bench, VM == "Snapshots"))
#snaps <- tail(snaps[order(snaps$Latency),], 1000) 

overview_box_plot <- function(vm_stats, vms, prepare_data = NULL, pre_plot = NULL, new_colors = FALSE) {
  vm_stats <- vm_stats %>%
    filter(VM %in% vms)
  
  
  vm_stats <- droplevels(vm_stats)
  vm_names <- vm_names[levels(vm_stats$VM)]
  vm_stats$VM <- revalue(vm_stats$VM, c("Pharo" = "Fuel"))
  vm_stats$VM <- reorder(vm_stats$VM, X=-vm_stats$VMMean)
  vm_stats <- droplevels(vm_stats)

  breaks <- levels(vm_stats$VM)
  # if (new_colors) {
  #   col_values <- brewer.pal(length(breaks), "Paired")
  # } else {
  #   col_values <- sapply(breaks, function(x) vm_colors[[x]])
  # }

  plot <- ggplot(vm_stats, aes(x=VM, y=RuntimeFactor)) #, fill = VM
  if (!is.null(pre_plot)) {
    plot <- pre_plot(plot)
  }
  plot <- plot +
    geom_boxplot(outlier.size = 0.5) + #fill=get_color(5, 7)
    theme_bw() + theme_simple(font_size = 8) +
    theme(axis.text.x = element_text(angle= 90, vjust=0.5, hjust=1), legend.position="none") +
    ylab("Runtime Factor nnormalized to SOMns\n(lower is better)") + xlab("") # + coord_flip() 
    #+ scale_fill_manual(values = col_values)
  plot
}
@

\def\ACDCBox{%
<<acdc-box, fig.height=2.2, fig.width=1.5>>=
#vm_names <- vm_names[levels(stats$VM)]
#stats$VM <- revalue(stats$VM, vm_names)
p <- overview_box_plot(stats_vm, c("SOMns", "Pharo"))
p <- p + geom_hline(aes(yintercept=1), colour="#cccccc", linetype="dashed")
p <- p + geom_hline(aes(yintercept=30), colour="#cccccc", linetype="dashed")
p <- p + scale_y_continuous(breaks = c(1, 10, 20, 30))
p
@
}%

\newcommand{\ACDCPharoMaxX}{
  \Sexpr{X2(vm_stats[1,]$max)
}\xspace}

\newcommand{\ACDCPharoGMeanX}{
  \Sexpr{X2(vm_stats[1,]$gmean)
}\xspace}
